// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class idleCDOimplementation__harvestResult {
  value0: Array<BigInt>;
  value1: Array<BigInt>;
  value2: Array<BigInt>;

  constructor(
    value0: Array<BigInt>,
    value1: Array<BigInt>,
    value2: Array<BigInt>
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigIntArray(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigIntArray(this.value2));
    return map;
  }
}

export class idleCDOimplementation extends ethereum.SmartContract {
  static bind(address: Address): idleCDOimplementation {
    return new idleCDOimplementation("idleCDOimplementation", address);
  }

  AAStaking(): Address {
    let result = super.call("AAStaking", "AAStaking():(address)", []);

    return result[0].toAddress();
  }

  try_AAStaking(): ethereum.CallResult<Address> {
    let result = super.tryCall("AAStaking", "AAStaking():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  AATranche(): Address {
    let result = super.call("AATranche", "AATranche():(address)", []);

    return result[0].toAddress();
  }

  try_AATranche(): ethereum.CallResult<Address> {
    let result = super.tryCall("AATranche", "AATranche():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  BBStaking(): Address {
    let result = super.call("BBStaking", "BBStaking():(address)", []);

    return result[0].toAddress();
  }

  try_BBStaking(): ethereum.CallResult<Address> {
    let result = super.tryCall("BBStaking", "BBStaking():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  BBTranche(): Address {
    let result = super.call("BBTranche", "BBTranche():(address)", []);

    return result[0].toAddress();
  }

  try_BBTranche(): ethereum.CallResult<Address> {
    let result = super.tryCall("BBTranche", "BBTranche():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  FULL_ALLOC(): BigInt {
    let result = super.call("FULL_ALLOC", "FULL_ALLOC():(uint256)", []);

    return result[0].toBigInt();
  }

  try_FULL_ALLOC(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("FULL_ALLOC", "FULL_ALLOC():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MAX_FEE(): BigInt {
    let result = super.call("MAX_FEE", "MAX_FEE():(uint256)", []);

    return result[0].toBigInt();
  }

  try_MAX_FEE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("MAX_FEE", "MAX_FEE():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  ONE_TRANCHE_TOKEN(): BigInt {
    let result = super.call(
      "ONE_TRANCHE_TOKEN",
      "ONE_TRANCHE_TOKEN():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_ONE_TRANCHE_TOKEN(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "ONE_TRANCHE_TOKEN",
      "ONE_TRANCHE_TOKEN():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  allowAAWithdraw(): boolean {
    let result = super.call("allowAAWithdraw", "allowAAWithdraw():(bool)", []);

    return result[0].toBoolean();
  }

  try_allowAAWithdraw(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "allowAAWithdraw",
      "allowAAWithdraw():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  allowBBWithdraw(): boolean {
    let result = super.call("allowBBWithdraw", "allowBBWithdraw():(bool)", []);

    return result[0].toBoolean();
  }

  try_allowBBWithdraw(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "allowBBWithdraw",
      "allowBBWithdraw():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  depositAA(_amount: BigInt): BigInt {
    let result = super.call("depositAA", "depositAA(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_amount)
    ]);

    return result[0].toBigInt();
  }

  try_depositAA(_amount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("depositAA", "depositAA(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  depositBB(_amount: BigInt): BigInt {
    let result = super.call("depositBB", "depositBB(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_amount)
    ]);

    return result[0].toBigInt();
  }

  try_depositBB(_amount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("depositBB", "depositBB(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  fee(): BigInt {
    let result = super.call("fee", "fee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_fee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("fee", "fee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  feeReceiver(): Address {
    let result = super.call("feeReceiver", "feeReceiver():(address)", []);

    return result[0].toAddress();
  }

  try_feeReceiver(): ethereum.CallResult<Address> {
    let result = super.tryCall("feeReceiver", "feeReceiver():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getApr(_tranche: Address): BigInt {
    let result = super.call("getApr", "getApr(address):(uint256)", [
      ethereum.Value.fromAddress(_tranche)
    ]);

    return result[0].toBigInt();
  }

  try_getApr(_tranche: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getApr", "getApr(address):(uint256)", [
      ethereum.Value.fromAddress(_tranche)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getContractValue(): BigInt {
    let result = super.call(
      "getContractValue",
      "getContractValue():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getContractValue(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getContractValue",
      "getContractValue():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getCurrentAARatio(): BigInt {
    let result = super.call(
      "getCurrentAARatio",
      "getCurrentAARatio():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getCurrentAARatio(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCurrentAARatio",
      "getCurrentAARatio():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getIdealApr(_tranche: Address): BigInt {
    let result = super.call("getIdealApr", "getIdealApr(address):(uint256)", [
      ethereum.Value.fromAddress(_tranche)
    ]);

    return result[0].toBigInt();
  }

  try_getIdealApr(_tranche: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getIdealApr",
      "getIdealApr(address):(uint256)",
      [ethereum.Value.fromAddress(_tranche)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getIncentiveTokens(): Array<Address> {
    let result = super.call(
      "getIncentiveTokens",
      "getIncentiveTokens():(address[])",
      []
    );

    return result[0].toAddressArray();
  }

  try_getIncentiveTokens(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getIncentiveTokens",
      "getIncentiveTokens():(address[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  governanceRecoveryFund(): Address {
    let result = super.call(
      "governanceRecoveryFund",
      "governanceRecoveryFund():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_governanceRecoveryFund(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "governanceRecoveryFund",
      "governanceRecoveryFund():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  guardian(): Address {
    let result = super.call("guardian", "guardian():(address)", []);

    return result[0].toAddress();
  }

  try_guardian(): ethereum.CallResult<Address> {
    let result = super.tryCall("guardian", "guardian():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  harvest(
    _skipRedeem: boolean,
    _skipIncentivesUpdate: boolean,
    _skipFeeDeposit: boolean,
    _skipReward: Array<boolean>,
    _minAmount: Array<BigInt>,
    _sellAmounts: Array<BigInt>
  ): idleCDOimplementation__harvestResult {
    let result = super.call(
      "harvest",
      "harvest(bool,bool,bool,bool[],uint256[],uint256[]):(uint256[],uint256[],uint256[])",
      [
        ethereum.Value.fromBoolean(_skipRedeem),
        ethereum.Value.fromBoolean(_skipIncentivesUpdate),
        ethereum.Value.fromBoolean(_skipFeeDeposit),
        ethereum.Value.fromBooleanArray(_skipReward),
        ethereum.Value.fromUnsignedBigIntArray(_minAmount),
        ethereum.Value.fromUnsignedBigIntArray(_sellAmounts)
      ]
    );

    return new idleCDOimplementation__harvestResult(
      result[0].toBigIntArray(),
      result[1].toBigIntArray(),
      result[2].toBigIntArray()
    );
  }

  try_harvest(
    _skipRedeem: boolean,
    _skipIncentivesUpdate: boolean,
    _skipFeeDeposit: boolean,
    _skipReward: Array<boolean>,
    _minAmount: Array<BigInt>,
    _sellAmounts: Array<BigInt>
  ): ethereum.CallResult<idleCDOimplementation__harvestResult> {
    let result = super.tryCall(
      "harvest",
      "harvest(bool,bool,bool,bool[],uint256[],uint256[]):(uint256[],uint256[],uint256[])",
      [
        ethereum.Value.fromBoolean(_skipRedeem),
        ethereum.Value.fromBoolean(_skipIncentivesUpdate),
        ethereum.Value.fromBoolean(_skipFeeDeposit),
        ethereum.Value.fromBooleanArray(_skipReward),
        ethereum.Value.fromUnsignedBigIntArray(_minAmount),
        ethereum.Value.fromUnsignedBigIntArray(_sellAmounts)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new idleCDOimplementation__harvestResult(
        value[0].toBigIntArray(),
        value[1].toBigIntArray(),
        value[2].toBigIntArray()
      )
    );
  }

  idealRange(): BigInt {
    let result = super.call("idealRange", "idealRange():(uint256)", []);

    return result[0].toBigInt();
  }

  try_idealRange(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("idealRange", "idealRange():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  incentiveTokens(param0: BigInt): Address {
    let result = super.call(
      "incentiveTokens",
      "incentiveTokens(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try_incentiveTokens(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "incentiveTokens",
      "incentiveTokens(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  lastNAVAA(): BigInt {
    let result = super.call("lastNAVAA", "lastNAVAA():(uint256)", []);

    return result[0].toBigInt();
  }

  try_lastNAVAA(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("lastNAVAA", "lastNAVAA():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lastNAVBB(): BigInt {
    let result = super.call("lastNAVBB", "lastNAVBB():(uint256)", []);

    return result[0].toBigInt();
  }

  try_lastNAVBB(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("lastNAVBB", "lastNAVBB():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lastStrategyPrice(): BigInt {
    let result = super.call(
      "lastStrategyPrice",
      "lastStrategyPrice():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_lastStrategyPrice(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastStrategyPrice",
      "lastStrategyPrice():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  limit(): BigInt {
    let result = super.call("limit", "limit():(uint256)", []);

    return result[0].toBigInt();
  }

  try_limit(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("limit", "limit():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  liquidate(_amount: BigInt, _revertIfNeeded: boolean): BigInt {
    let result = super.call("liquidate", "liquidate(uint256,bool):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_amount),
      ethereum.Value.fromBoolean(_revertIfNeeded)
    ]);

    return result[0].toBigInt();
  }

  try_liquidate(
    _amount: BigInt,
    _revertIfNeeded: boolean
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "liquidate",
      "liquidate(uint256,bool):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_amount),
        ethereum.Value.fromBoolean(_revertIfNeeded)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  oneToken(): BigInt {
    let result = super.call("oneToken", "oneToken():(uint256)", []);

    return result[0].toBigInt();
  }

  try_oneToken(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("oneToken", "oneToken():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  priceAA(): BigInt {
    let result = super.call("priceAA", "priceAA():(uint256)", []);

    return result[0].toBigInt();
  }

  try_priceAA(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("priceAA", "priceAA():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  priceBB(): BigInt {
    let result = super.call("priceBB", "priceBB():(uint256)", []);

    return result[0].toBigInt();
  }

  try_priceBB(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("priceBB", "priceBB():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rebalancer(): Address {
    let result = super.call("rebalancer", "rebalancer():(address)", []);

    return result[0].toAddress();
  }

  try_rebalancer(): ethereum.CallResult<Address> {
    let result = super.tryCall("rebalancer", "rebalancer():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  releaseBlocksPeriod(): BigInt {
    let result = super.call(
      "releaseBlocksPeriod",
      "releaseBlocksPeriod():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_releaseBlocksPeriod(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "releaseBlocksPeriod",
      "releaseBlocksPeriod():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  revertIfTooLow(): boolean {
    let result = super.call("revertIfTooLow", "revertIfTooLow():(bool)", []);

    return result[0].toBoolean();
  }

  try_revertIfTooLow(): ethereum.CallResult<boolean> {
    let result = super.tryCall("revertIfTooLow", "revertIfTooLow():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  skipDefaultCheck(): boolean {
    let result = super.call(
      "skipDefaultCheck",
      "skipDefaultCheck():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_skipDefaultCheck(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "skipDefaultCheck",
      "skipDefaultCheck():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  strategy(): Address {
    let result = super.call("strategy", "strategy():(address)", []);

    return result[0].toAddress();
  }

  try_strategy(): ethereum.CallResult<Address> {
    let result = super.tryCall("strategy", "strategy():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  strategyToken(): Address {
    let result = super.call("strategyToken", "strategyToken():(address)", []);

    return result[0].toAddress();
  }

  try_strategyToken(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "strategyToken",
      "strategyToken():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  token(): Address {
    let result = super.call("token", "token():(address)", []);

    return result[0].toAddress();
  }

  try_token(): ethereum.CallResult<Address> {
    let result = super.tryCall("token", "token():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  trancheAPRSplitRatio(): BigInt {
    let result = super.call(
      "trancheAPRSplitRatio",
      "trancheAPRSplitRatio():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_trancheAPRSplitRatio(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "trancheAPRSplitRatio",
      "trancheAPRSplitRatio():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  trancheIdealWeightRatio(): BigInt {
    let result = super.call(
      "trancheIdealWeightRatio",
      "trancheIdealWeightRatio():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_trancheIdealWeightRatio(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "trancheIdealWeightRatio",
      "trancheIdealWeightRatio():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tranchePrice(_tranche: Address): BigInt {
    let result = super.call("tranchePrice", "tranchePrice(address):(uint256)", [
      ethereum.Value.fromAddress(_tranche)
    ]);

    return result[0].toBigInt();
  }

  try_tranchePrice(_tranche: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tranchePrice",
      "tranchePrice(address):(uint256)",
      [ethereum.Value.fromAddress(_tranche)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  unclaimedFees(): BigInt {
    let result = super.call("unclaimedFees", "unclaimedFees():(uint256)", []);

    return result[0].toBigInt();
  }

  try_unclaimedFees(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "unclaimedFees",
      "unclaimedFees():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  unlentPerc(): BigInt {
    let result = super.call("unlentPerc", "unlentPerc():(uint256)", []);

    return result[0].toBigInt();
  }

  try_unlentPerc(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("unlentPerc", "unlentPerc():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  virtualPrice(_tranche: Address): BigInt {
    let result = super.call("virtualPrice", "virtualPrice(address):(uint256)", [
      ethereum.Value.fromAddress(_tranche)
    ]);

    return result[0].toBigInt();
  }

  try_virtualPrice(_tranche: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "virtualPrice",
      "virtualPrice(address):(uint256)",
      [ethereum.Value.fromAddress(_tranche)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  weth(): Address {
    let result = super.call("weth", "weth():(address)", []);

    return result[0].toAddress();
  }

  try_weth(): ethereum.CallResult<Address> {
    let result = super.tryCall("weth", "weth():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  withdrawAA(_amount: BigInt): BigInt {
    let result = super.call("withdrawAA", "withdrawAA(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_amount)
    ]);

    return result[0].toBigInt();
  }

  try_withdrawAA(_amount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("withdrawAA", "withdrawAA(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  withdrawBB(_amount: BigInt): BigInt {
    let result = super.call("withdrawBB", "withdrawBB(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_amount)
    ]);

    return result[0].toBigInt();
  }

  try_withdrawBB(_amount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("withdrawBB", "withdrawBB(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class _setLimitCall extends ethereum.Call {
  get inputs(): _setLimitCall__Inputs {
    return new _setLimitCall__Inputs(this);
  }

  get outputs(): _setLimitCall__Outputs {
    return new _setLimitCall__Outputs(this);
  }
}

export class _setLimitCall__Inputs {
  _call: _setLimitCall;

  constructor(call: _setLimitCall) {
    this._call = call;
  }

  get _limit(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class _setLimitCall__Outputs {
  _call: _setLimitCall;

  constructor(call: _setLimitCall) {
    this._call = call;
  }
}

export class DepositAACall extends ethereum.Call {
  get inputs(): DepositAACall__Inputs {
    return new DepositAACall__Inputs(this);
  }

  get outputs(): DepositAACall__Outputs {
    return new DepositAACall__Outputs(this);
  }
}

export class DepositAACall__Inputs {
  _call: DepositAACall;

  constructor(call: DepositAACall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DepositAACall__Outputs {
  _call: DepositAACall;

  constructor(call: DepositAACall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class DepositBBCall extends ethereum.Call {
  get inputs(): DepositBBCall__Inputs {
    return new DepositBBCall__Inputs(this);
  }

  get outputs(): DepositBBCall__Outputs {
    return new DepositBBCall__Outputs(this);
  }
}

export class DepositBBCall__Inputs {
  _call: DepositBBCall;

  constructor(call: DepositBBCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DepositBBCall__Outputs {
  _call: DepositBBCall;

  constructor(call: DepositBBCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class EmergencyShutdownCall extends ethereum.Call {
  get inputs(): EmergencyShutdownCall__Inputs {
    return new EmergencyShutdownCall__Inputs(this);
  }

  get outputs(): EmergencyShutdownCall__Outputs {
    return new EmergencyShutdownCall__Outputs(this);
  }
}

export class EmergencyShutdownCall__Inputs {
  _call: EmergencyShutdownCall;

  constructor(call: EmergencyShutdownCall) {
    this._call = call;
  }
}

export class EmergencyShutdownCall__Outputs {
  _call: EmergencyShutdownCall;

  constructor(call: EmergencyShutdownCall) {
    this._call = call;
  }
}

export class HarvestCall extends ethereum.Call {
  get inputs(): HarvestCall__Inputs {
    return new HarvestCall__Inputs(this);
  }

  get outputs(): HarvestCall__Outputs {
    return new HarvestCall__Outputs(this);
  }
}

export class HarvestCall__Inputs {
  _call: HarvestCall;

  constructor(call: HarvestCall) {
    this._call = call;
  }

  get _skipRedeem(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }

  get _skipIncentivesUpdate(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }

  get _skipFeeDeposit(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }

  get _skipReward(): Array<boolean> {
    return this._call.inputValues[3].value.toBooleanArray();
  }

  get _minAmount(): Array<BigInt> {
    return this._call.inputValues[4].value.toBigIntArray();
  }

  get _sellAmounts(): Array<BigInt> {
    return this._call.inputValues[5].value.toBigIntArray();
  }
}

export class HarvestCall__Outputs {
  _call: HarvestCall;

  constructor(call: HarvestCall) {
    this._call = call;
  }

  get _soldAmounts(): Array<BigInt> {
    return this._call.outputValues[0].value.toBigIntArray();
  }

  get _swappedAmounts(): Array<BigInt> {
    return this._call.outputValues[1].value.toBigIntArray();
  }

  get _redeemedRewards(): Array<BigInt> {
    return this._call.outputValues[2].value.toBigIntArray();
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _limit(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _guardedToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _governanceFund(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _owner(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _rebalancer(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get _strategy(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get _trancheAPRSplitRatio(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get _trancheIdealWeightRatio(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }

  get _incentiveTokens(): Array<Address> {
    return this._call.inputValues[8].value.toAddressArray();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class LiquidateCall extends ethereum.Call {
  get inputs(): LiquidateCall__Inputs {
    return new LiquidateCall__Inputs(this);
  }

  get outputs(): LiquidateCall__Outputs {
    return new LiquidateCall__Outputs(this);
  }
}

export class LiquidateCall__Inputs {
  _call: LiquidateCall;

  constructor(call: LiquidateCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _revertIfNeeded(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class LiquidateCall__Outputs {
  _call: LiquidateCall;

  constructor(call: LiquidateCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetAllowAAWithdrawCall extends ethereum.Call {
  get inputs(): SetAllowAAWithdrawCall__Inputs {
    return new SetAllowAAWithdrawCall__Inputs(this);
  }

  get outputs(): SetAllowAAWithdrawCall__Outputs {
    return new SetAllowAAWithdrawCall__Outputs(this);
  }
}

export class SetAllowAAWithdrawCall__Inputs {
  _call: SetAllowAAWithdrawCall;

  constructor(call: SetAllowAAWithdrawCall) {
    this._call = call;
  }

  get _allowed(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetAllowAAWithdrawCall__Outputs {
  _call: SetAllowAAWithdrawCall;

  constructor(call: SetAllowAAWithdrawCall) {
    this._call = call;
  }
}

export class SetAllowBBWithdrawCall extends ethereum.Call {
  get inputs(): SetAllowBBWithdrawCall__Inputs {
    return new SetAllowBBWithdrawCall__Inputs(this);
  }

  get outputs(): SetAllowBBWithdrawCall__Outputs {
    return new SetAllowBBWithdrawCall__Outputs(this);
  }
}

export class SetAllowBBWithdrawCall__Inputs {
  _call: SetAllowBBWithdrawCall;

  constructor(call: SetAllowBBWithdrawCall) {
    this._call = call;
  }

  get _allowed(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetAllowBBWithdrawCall__Outputs {
  _call: SetAllowBBWithdrawCall;

  constructor(call: SetAllowBBWithdrawCall) {
    this._call = call;
  }
}

export class SetFeeCall extends ethereum.Call {
  get inputs(): SetFeeCall__Inputs {
    return new SetFeeCall__Inputs(this);
  }

  get outputs(): SetFeeCall__Outputs {
    return new SetFeeCall__Outputs(this);
  }
}

export class SetFeeCall__Inputs {
  _call: SetFeeCall;

  constructor(call: SetFeeCall) {
    this._call = call;
  }

  get _fee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetFeeCall__Outputs {
  _call: SetFeeCall;

  constructor(call: SetFeeCall) {
    this._call = call;
  }
}

export class SetFeeReceiverCall extends ethereum.Call {
  get inputs(): SetFeeReceiverCall__Inputs {
    return new SetFeeReceiverCall__Inputs(this);
  }

  get outputs(): SetFeeReceiverCall__Outputs {
    return new SetFeeReceiverCall__Outputs(this);
  }
}

export class SetFeeReceiverCall__Inputs {
  _call: SetFeeReceiverCall;

  constructor(call: SetFeeReceiverCall) {
    this._call = call;
  }

  get _feeReceiver(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetFeeReceiverCall__Outputs {
  _call: SetFeeReceiverCall;

  constructor(call: SetFeeReceiverCall) {
    this._call = call;
  }
}

export class SetGuardianCall extends ethereum.Call {
  get inputs(): SetGuardianCall__Inputs {
    return new SetGuardianCall__Inputs(this);
  }

  get outputs(): SetGuardianCall__Outputs {
    return new SetGuardianCall__Outputs(this);
  }
}

export class SetGuardianCall__Inputs {
  _call: SetGuardianCall;

  constructor(call: SetGuardianCall) {
    this._call = call;
  }

  get _guardian(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetGuardianCall__Outputs {
  _call: SetGuardianCall;

  constructor(call: SetGuardianCall) {
    this._call = call;
  }
}

export class SetIdealRangeCall extends ethereum.Call {
  get inputs(): SetIdealRangeCall__Inputs {
    return new SetIdealRangeCall__Inputs(this);
  }

  get outputs(): SetIdealRangeCall__Outputs {
    return new SetIdealRangeCall__Outputs(this);
  }
}

export class SetIdealRangeCall__Inputs {
  _call: SetIdealRangeCall;

  constructor(call: SetIdealRangeCall) {
    this._call = call;
  }

  get _idealRange(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetIdealRangeCall__Outputs {
  _call: SetIdealRangeCall;

  constructor(call: SetIdealRangeCall) {
    this._call = call;
  }
}

export class SetIncentiveTokensCall extends ethereum.Call {
  get inputs(): SetIncentiveTokensCall__Inputs {
    return new SetIncentiveTokensCall__Inputs(this);
  }

  get outputs(): SetIncentiveTokensCall__Outputs {
    return new SetIncentiveTokensCall__Outputs(this);
  }
}

export class SetIncentiveTokensCall__Inputs {
  _call: SetIncentiveTokensCall;

  constructor(call: SetIncentiveTokensCall) {
    this._call = call;
  }

  get _incentiveTokens(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class SetIncentiveTokensCall__Outputs {
  _call: SetIncentiveTokensCall;

  constructor(call: SetIncentiveTokensCall) {
    this._call = call;
  }
}

export class SetIsStkAAVEActiveCall extends ethereum.Call {
  get inputs(): SetIsStkAAVEActiveCall__Inputs {
    return new SetIsStkAAVEActiveCall__Inputs(this);
  }

  get outputs(): SetIsStkAAVEActiveCall__Outputs {
    return new SetIsStkAAVEActiveCall__Outputs(this);
  }
}

export class SetIsStkAAVEActiveCall__Inputs {
  _call: SetIsStkAAVEActiveCall;

  constructor(call: SetIsStkAAVEActiveCall) {
    this._call = call;
  }

  get _isStkAAVEActive(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetIsStkAAVEActiveCall__Outputs {
  _call: SetIsStkAAVEActiveCall;

  constructor(call: SetIsStkAAVEActiveCall) {
    this._call = call;
  }
}

export class SetRebalancerCall extends ethereum.Call {
  get inputs(): SetRebalancerCall__Inputs {
    return new SetRebalancerCall__Inputs(this);
  }

  get outputs(): SetRebalancerCall__Outputs {
    return new SetRebalancerCall__Outputs(this);
  }
}

export class SetRebalancerCall__Inputs {
  _call: SetRebalancerCall;

  constructor(call: SetRebalancerCall) {
    this._call = call;
  }

  get _rebalancer(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetRebalancerCall__Outputs {
  _call: SetRebalancerCall;

  constructor(call: SetRebalancerCall) {
    this._call = call;
  }
}

export class SetReleaseBlocksPeriodCall extends ethereum.Call {
  get inputs(): SetReleaseBlocksPeriodCall__Inputs {
    return new SetReleaseBlocksPeriodCall__Inputs(this);
  }

  get outputs(): SetReleaseBlocksPeriodCall__Outputs {
    return new SetReleaseBlocksPeriodCall__Outputs(this);
  }
}

export class SetReleaseBlocksPeriodCall__Inputs {
  _call: SetReleaseBlocksPeriodCall;

  constructor(call: SetReleaseBlocksPeriodCall) {
    this._call = call;
  }

  get _releaseBlocksPeriod(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetReleaseBlocksPeriodCall__Outputs {
  _call: SetReleaseBlocksPeriodCall;

  constructor(call: SetReleaseBlocksPeriodCall) {
    this._call = call;
  }
}

export class SetRevertIfTooLowCall extends ethereum.Call {
  get inputs(): SetRevertIfTooLowCall__Inputs {
    return new SetRevertIfTooLowCall__Inputs(this);
  }

  get outputs(): SetRevertIfTooLowCall__Outputs {
    return new SetRevertIfTooLowCall__Outputs(this);
  }
}

export class SetRevertIfTooLowCall__Inputs {
  _call: SetRevertIfTooLowCall;

  constructor(call: SetRevertIfTooLowCall) {
    this._call = call;
  }

  get _allowed(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetRevertIfTooLowCall__Outputs {
  _call: SetRevertIfTooLowCall;

  constructor(call: SetRevertIfTooLowCall) {
    this._call = call;
  }
}

export class SetSkipDefaultCheckCall extends ethereum.Call {
  get inputs(): SetSkipDefaultCheckCall__Inputs {
    return new SetSkipDefaultCheckCall__Inputs(this);
  }

  get outputs(): SetSkipDefaultCheckCall__Outputs {
    return new SetSkipDefaultCheckCall__Outputs(this);
  }
}

export class SetSkipDefaultCheckCall__Inputs {
  _call: SetSkipDefaultCheckCall;

  constructor(call: SetSkipDefaultCheckCall) {
    this._call = call;
  }

  get _allowed(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetSkipDefaultCheckCall__Outputs {
  _call: SetSkipDefaultCheckCall;

  constructor(call: SetSkipDefaultCheckCall) {
    this._call = call;
  }
}

export class SetStakingRewardsCall extends ethereum.Call {
  get inputs(): SetStakingRewardsCall__Inputs {
    return new SetStakingRewardsCall__Inputs(this);
  }

  get outputs(): SetStakingRewardsCall__Outputs {
    return new SetStakingRewardsCall__Outputs(this);
  }
}

export class SetStakingRewardsCall__Inputs {
  _call: SetStakingRewardsCall;

  constructor(call: SetStakingRewardsCall) {
    this._call = call;
  }

  get _AAStaking(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _BBStaking(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetStakingRewardsCall__Outputs {
  _call: SetStakingRewardsCall;

  constructor(call: SetStakingRewardsCall) {
    this._call = call;
  }
}

export class SetStrategyCall extends ethereum.Call {
  get inputs(): SetStrategyCall__Inputs {
    return new SetStrategyCall__Inputs(this);
  }

  get outputs(): SetStrategyCall__Outputs {
    return new SetStrategyCall__Outputs(this);
  }
}

export class SetStrategyCall__Inputs {
  _call: SetStrategyCall;

  constructor(call: SetStrategyCall) {
    this._call = call;
  }

  get _strategy(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _incentiveTokens(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }
}

export class SetStrategyCall__Outputs {
  _call: SetStrategyCall;

  constructor(call: SetStrategyCall) {
    this._call = call;
  }
}

export class SetUnlentPercCall extends ethereum.Call {
  get inputs(): SetUnlentPercCall__Inputs {
    return new SetUnlentPercCall__Inputs(this);
  }

  get outputs(): SetUnlentPercCall__Outputs {
    return new SetUnlentPercCall__Outputs(this);
  }
}

export class SetUnlentPercCall__Inputs {
  _call: SetUnlentPercCall;

  constructor(call: SetUnlentPercCall) {
    this._call = call;
  }

  get _unlentPerc(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetUnlentPercCall__Outputs {
  _call: SetUnlentPercCall;

  constructor(call: SetUnlentPercCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class TransferTokenCall extends ethereum.Call {
  get inputs(): TransferTokenCall__Inputs {
    return new TransferTokenCall__Inputs(this);
  }

  get outputs(): TransferTokenCall__Outputs {
    return new TransferTokenCall__Outputs(this);
  }
}

export class TransferTokenCall__Inputs {
  _call: TransferTokenCall;

  constructor(call: TransferTokenCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferTokenCall__Outputs {
  _call: TransferTokenCall;

  constructor(call: TransferTokenCall) {
    this._call = call;
  }
}

export class UnpauseCall extends ethereum.Call {
  get inputs(): UnpauseCall__Inputs {
    return new UnpauseCall__Inputs(this);
  }

  get outputs(): UnpauseCall__Outputs {
    return new UnpauseCall__Outputs(this);
  }
}

export class UnpauseCall__Inputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnpauseCall__Outputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class WithdrawAACall extends ethereum.Call {
  get inputs(): WithdrawAACall__Inputs {
    return new WithdrawAACall__Inputs(this);
  }

  get outputs(): WithdrawAACall__Outputs {
    return new WithdrawAACall__Outputs(this);
  }
}

export class WithdrawAACall__Inputs {
  _call: WithdrawAACall;

  constructor(call: WithdrawAACall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawAACall__Outputs {
  _call: WithdrawAACall;

  constructor(call: WithdrawAACall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class WithdrawBBCall extends ethereum.Call {
  get inputs(): WithdrawBBCall__Inputs {
    return new WithdrawBBCall__Inputs(this);
  }

  get outputs(): WithdrawBBCall__Outputs {
    return new WithdrawBBCall__Outputs(this);
  }
}

export class WithdrawBBCall__Inputs {
  _call: WithdrawBBCall;

  constructor(call: WithdrawBBCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawBBCall__Outputs {
  _call: WithdrawBBCall;

  constructor(call: WithdrawBBCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}
